// ewqewq.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "string.h"
#include "stdlib.h"

#define OK 1
#define ERROR 0
#define OVERFLOW -2

typedef int Status;
typedef int ElemType;

typedef struct LNode
{
	ElemType data;
	struct LNode *next;
}LNode,*LinkList;

int create(LinkList Head);
void input(LinkList Head);
void chazhao(LinkList Head);
int charu(LinkList Head,int i);
void Delete(LinkList Head,int i);

int main(int argc, char* argv[])
{
	int i;

	LinkList Head;
	Head=(LinkList)malloc(sizeof(LNode));
	Head->next=NULL;

	int a;

	while(1)
	{
		printf("		目录			\n");
		printf("1.创建单链表		2.输出单链表\n");
		printf("3.查找			4.插入\n");
		printf("5.删除			6.结束\n");

		printf("请选择:");
		scanf("%d",&a);
		
		switch(a)
		{
		case 1:
				i=create(Head);
				break;
		case 2:
				input(Head);
				break;
		case 3:
				chazhao(Head);
				break;
		case 4:
				i=charu(Head,i);
				break;
		case 5:
				Delete(Head,i);
				break;
		default:exit(0);break;
		}

		system("cls");

	}
	return 0;
}


int create(LinkList Head)
{
	LinkList p,q;
	int a,i=0;
	q=Head;

	printf("请输入数据,0=结束\n");
	scanf("%d",&a);

	while(a!=0)
	{
		p=(LinkList)malloc(sizeof(LNode));
		p->data=a;
		q->next=p;
		q=p;
		i++;
		scanf("%d",&a);
	}

	p->next=NULL;
	printf("创建完毕\n");
	system("pause");
	return i;
}

void input(LinkList Head)
{
	if(Head->next==NULL)	
	{
		printf("链表为空\n");
		system("pause");
	}
	else
	{
	LinkList p;
	p=Head->next;

	while(p!=NULL)
	{
		printf("%d ",p->data);
		p=p->next;
	}

	printf("\n");
	system("pause");
	}
}

void chazhao(LinkList Head)
{
	if(Head->next==NULL)	
	{
		printf("链表为空\n");
		system("pause");
	}
	else
	{
	LinkList p,q;
	p=Head->next;
	q=Head;
	int a,c=0,i=1;

	printf("请输入需要查找的元素:");
	scanf("%d",&a);
		
	while((q->next!=NULL) && (p->data!=a))
	{
		q=q->next;
		p=p->next;
		i++;
	}

	if(q->next==NULL)	
		printf("没有找到\n");	
	else	
		printf("找到,该元素是第%d个",i);
	
	system("pause");
	}
}

int charu(LinkList Head,int i)
{
	if(Head->next==NULL)	
	{
		printf("链表为空\n");
		system("pause");
	}
	else
	{
	int a,b,k,t;
	LinkList q,p;
	q=Head;
	p=Head->next;

	printf("请选择 1=在最后一个元素后插入 2=其他位置\n");
	scanf("%d",&t);

	switch(t)
	{
	case 1:
			printf("请输入需要插入的元素:");
			scanf("%d",&b);
			
			LinkList w;
			w=(LinkList)malloc(sizeof(LNode));
			w->data=b;

			while(p->next!=NULL)
				p=p->next;

			p->next=w;
			w->next=NULL;

			printf("插入完成\n");
			i++;

			system("pause");			
			break;

	case 2:
		printf("请输入需要插入的元素的位置(在该位置的前面插入):");
		scanf("%d",&a);
		printf("请输入需要插入的元素:");
		scanf("%d",&b);

		if((a<0) || (a>i))	
		{
			printf("插入位置有问题:");
			exit(0);
		}
		else
		{
			for(k=1;k<a;k++)
			{
				p=p->next;
				q=q->next;
			}
	
			LinkList w;
			w=(LinkList)malloc(sizeof(LNode));
			w->data=b;
	
			w->next=q->next;
			q->next=w;

			printf("插入完成\n");
			i++;

			system("pause");
			break;
		}
	}
	return i;
	}
}

void Delete(LinkList Head,int i)
{
	if(Head->next==NULL)	
	{
		printf("链表为空\n");
		system("pause");
	}
	else
	{
	LinkList p,q;
	q=Head;
	p=Head->next;
	int k,z;

	printf("请输入需要删除的元素的位置:");
	scanf("%d",&z);

	if((z<=0) || (z>i))	
	{
		printf("位置不对\n");
		system("pause");
	}
	else
	{
		for(k=1;k<z;k++)
		{
			q=q->next;
			p=p->next;
		}
	
		printf("删除了元素%d\n",p->data);
		q->next=p->next;

		free(p);

		printf("删除成功\n");
		system("pause");
	}
	}
}

